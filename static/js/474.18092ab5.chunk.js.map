{"version":3,"file":"static/js/474.18092ab5.chunk.js","mappings":"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","sources":["Network/SubApi.js","Pages/Admin/AdminNav.js","Utils/SockectConnect.js","Utils/SocketMessages.js","Utils/FetchData.js","Pages/Dashboard/Dashboard.js","Utils/VerifySub.js"],"sourcesContent":["import swal from \"sweetalert\";\r\nimport { addSub, fetchSubs, updateSub } from \"../reducers/SubSlice\";\r\nimport { ApiUrl } from \"./Urls\";\r\n\r\nexport const FetchSubs = async (\r\n  token,\r\n  instLinker,\r\n  dispatch,\r\n  online,\r\n  from = \"fetch\",\r\n  payload = {}\r\n) => {\r\n  if (from === \"fetch\") {\r\n    FetchLiveSubs(token, instLinker, online, dispatch);\r\n  } else if (parseInt(instLinker) === parseInt(payload.instLinker)) {\r\n    dispatch(updateSub(payload));\r\n  }\r\n};\r\n\r\nexport const addLiveSub = (sub, instLinker, token, dispatch) => {\r\n  return fetch(`${ApiUrl}/sub/add`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"content-type\": \"application/json\",\r\n      authorization: `bearer ${token}`,\r\n    },\r\n    body: JSON.stringify({\r\n      ...sub,\r\n      instLinker,\r\n    }),\r\n  })\r\n    .then((res) => res.json())\r\n    .then((res) => {\r\n      if (res.status === 201) {\r\n        dispatch(updateSub(res.sub));\r\n      }\r\n    })\r\n    .catch(() => {\r\n      swal({\r\n        title: \"Failed to connect\",\r\n        icon: \"warning\",\r\n        timer: 3000,\r\n      });\r\n    });\r\n};\r\n\r\nexport const updateLiveSub = (sub, token, dispatch) => {\r\n  return fetch(`${ApiUrl}/sub/edit`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"content-type\": \"application/json\",\r\n      authorization: `bearer ${token}`,\r\n    },\r\n    body: JSON.stringify({\r\n      ...sub,\r\n    }),\r\n  })\r\n    .then((res) => res.json())\r\n    .then((res) => {\r\n      if (res.status === 200) {\r\n        dispatch(updateSub(res.sub));\r\n      }\r\n    })\r\n    .catch(() => {\r\n      swal({\r\n        title: \"Failed to connect\",\r\n        icon: \"warning\",\r\n        timer: 3000,\r\n      });\r\n    });\r\n};\r\n\r\nexport const FetchLiveSubs = (token, instLinker, online, dispatch) => {\r\n  fetch(`${ApiUrl}/sub/get`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"content-type\": \"application/json\",\r\n      authorization: `bearer ${token}`,\r\n    },\r\n    body: JSON.stringify({\r\n      online,\r\n      instLinker,\r\n    }),\r\n  })\r\n    .then((res) => res.json())\r\n    .then((res) => {\r\n      if (res.status === 200) {\r\n        dispatch(fetchSubs(res.subs));\r\n      }\r\n    })\r\n    .catch(() => {});\r\n};\r\n","import React from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Dropdown } from \"react-bootstrap\";\r\nimport { CashCoin, PersonGear } from \"react-bootstrap-icons\";\r\n\r\nconst AdminNav = ({ setDrawer }) => {\r\n  const navigate = useNavigate();\r\n  const inst = useSelector((state) => state.inst.activeInst);\r\n  return (\r\n    <>\r\n      <Dropdown style={{ width: \"100%\" }}>\r\n        <Dropdown.Toggle variant=\"transparent\" className=\"nav-link\">\r\n          <PersonGear /> Admin{\" \"}\r\n        </Dropdown.Toggle>\r\n        <Dropdown.Menu variant=\"dark\">\r\n          <Dropdown.Item>\r\n            <p\r\n              className=\"nav-link\"\r\n              onClick={() => {\r\n                setDrawer(false);\r\n                navigate(`branches`);\r\n              }}\r\n            >\r\n              Branches\r\n            </p>\r\n          </Dropdown.Item>\r\n          <Dropdown.Item>\r\n            <p\r\n              className=\"nav-link\"\r\n              onClick={() => {\r\n                setDrawer(false);\r\n                navigate(`groups`);\r\n              }}\r\n            >\r\n              Groups\r\n            </p>\r\n          </Dropdown.Item>\r\n          <Dropdown.Item>\r\n            <p\r\n              className=\"nav-link\"\r\n              onClick={() => {\r\n                setDrawer(false);\r\n                navigate(`accounts`);\r\n              }}\r\n            >\r\n              Accounts\r\n            </p>\r\n          </Dropdown.Item>\r\n          <Dropdown.Item>\r\n            <p\r\n              className=\"nav-link\"\r\n              onClick={() => {\r\n                setDrawer(false);\r\n                navigate(`staffs`);\r\n              }}\r\n            >\r\n              Staffs\r\n            </p>\r\n          </Dropdown.Item>\r\n          <Dropdown.Item>\r\n            <p\r\n              className=\"nav-link\"\r\n              onClick={() => {\r\n                setDrawer(false);\r\n                navigate(`modes`);\r\n              }}\r\n            >\r\n              Payment Modes\r\n            </p>\r\n          </Dropdown.Item>\r\n          <Dropdown.Item>\r\n            <p\r\n              className=\"nav-link\"\r\n              onClick={() => {\r\n                setDrawer(false);\r\n                navigate(`edit`);\r\n              }}\r\n            >\r\n              Edit Institution\r\n            </p>\r\n          </Dropdown.Item>\r\n        </Dropdown.Menu>\r\n      </Dropdown>\r\n      <hr />\r\n      <Dropdown style={{ width: \"100%\" }}>\r\n        <Dropdown.Toggle className=\"nav-link\" variant=\"transparent\">\r\n          <CashCoin /> Expenses\r\n        </Dropdown.Toggle>\r\n        <Dropdown.Menu variant=\"dark\">\r\n          <Dropdown.Item>\r\n            <p\r\n              className=\"nav-link\"\r\n              onClick={() => {\r\n                setDrawer(false);\r\n                navigate(`expensecats`);\r\n              }}\r\n            >\r\n              Expense Categories\r\n            </p>\r\n          </Dropdown.Item>\r\n          <Dropdown.Item>\r\n            <p\r\n              className=\"nav-link\"\r\n              onClick={() => {\r\n                setDrawer(false);\r\n                navigate(`expenses`);\r\n              }}\r\n            >\r\n              Expenses\r\n            </p>\r\n          </Dropdown.Item>{\" \"}\r\n        </Dropdown.Menu>\r\n      </Dropdown>{\" \"}\r\n      <hr />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AdminNav;\r\n","import io from \"socket.io-client\";\r\nimport { ApiUrl } from \"../Network/Urls\";\r\n\r\nexport const socket = io.connect(ApiUrl);\r\n\r\nexport const SocketJoinRoom = (data) => {\r\n  socket.emit(\"joinRoom\", data);\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport { socket } from \"./SockectConnect\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { FetchClients, FetchStaffs } from \"../Network/CredApi\";\r\nimport { FetchModes } from \"../Network/ModeApi\";\r\nimport { FetchExpenseCats } from \"../Network/ExpenseCatApi\";\r\nimport { FetchExpenses } from \"../Network/ExpenseApi\";\r\nimport { FetchAccounts } from \"../Network/AccountApi\";\r\nimport { FetchApplications } from \"../Network/ApplicationApi\";\r\nimport { FetchBranchs } from \"../Network/BranchApi\";\r\nimport { FetchEntrys } from \"../Network/EntryApi\";\r\nimport { FetchGroups } from \"../Network/GroupApi\";\r\nimport { FetchSubs } from \"../Network/SubApi\";\r\n\r\nconst SocketMessages = () => {\r\n  //redux dispatch\r\n  const dispatch = useDispatch();\r\n\r\n  const User = useSelector((state) => state.auth.user);\r\n  const online = useSelector((state) => state.online.online);\r\n  const ActiveCred = useSelector((state) => state.cred.activeCred);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"message\", (message) => {\r\n      if (message.messageType === \"staff\") {\r\n        FetchStaffs(\r\n          ActiveCred.instLinker,\r\n          User.token,\r\n          dispatch,\r\n          online,\r\n          \"socket\",\r\n          message.dataValues\r\n        );\r\n      }\r\n      if (message.messageType === \"mode\") {\r\n        FetchModes(\r\n          User.token,\r\n          ActiveCred.instLinker,\r\n          dispatch,\r\n          online,\r\n          \"socket\",\r\n          message.dataValues\r\n        );\r\n      }\r\n\r\n      if (message.messageType === \"expenseCat\") {\r\n        FetchExpenseCats(\r\n          User.token,\r\n          ActiveCred.instLinker,\r\n          dispatch,\r\n          online,\r\n          \"socket\",\r\n          message.dataValues\r\n        );\r\n      }\r\n      if (message.messageType === \"expense\") {\r\n        FetchExpenses(\r\n          User.token,\r\n          ActiveCred.instLinker,\r\n          dispatch,\r\n          online,\r\n          \"socket\",\r\n          message.dataValues\r\n        );\r\n      }\r\n      if (message.messageType === \"account\") {\r\n        FetchAccounts(\r\n          User.token,\r\n          ActiveCred.instLinker,\r\n          dispatch,\r\n          online,\r\n          \"socket\",\r\n          message.dataValues\r\n        );\r\n      }\r\n      if (message.messageType === \"application\") {\r\n        FetchApplications(\r\n          User.token,\r\n          ActiveCred.instLinker,\r\n          dispatch,\r\n          online,\r\n          \"socket\",\r\n          message.dataValues\r\n        );\r\n      }\r\n      if (message.messageType === \"branch\") {\r\n        FetchBranchs(\r\n          User.token,\r\n          ActiveCred.instLinker,\r\n          dispatch,\r\n          online,\r\n          \"socket\",\r\n          message.dataValues\r\n        );\r\n      }\r\n\r\n      if (message.messageType === \"entry\") {\r\n        FetchEntrys(\r\n          User.token,\r\n          ActiveCred.instLinker,\r\n          dispatch,\r\n          online,\r\n          \"socket\",\r\n          message.dataValues\r\n        );\r\n      }\r\n      if (message.messageType === \"group\") {\r\n        FetchGroups(\r\n          User.token,\r\n          ActiveCred.instLinker,\r\n          dispatch,\r\n          online,\r\n          \"socket\",\r\n          message.dataValues\r\n        );\r\n      }\r\n\r\n      if (message.messageType === \"client\") {\r\n        FetchClients(\r\n          ActiveCred.instLinker,\r\n          User.token,\r\n          dispatch,\r\n          online,\r\n          \"socket\",\r\n          message.dataValues\r\n        );\r\n      }\r\n      if (message.messageType === \"sub\") {\r\n        FetchSubs(\r\n          ActiveCred.instLinker,\r\n          User.token,\r\n          dispatch,\r\n          online,\r\n          \"socket\",\r\n          message.dataValues\r\n        );\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  return <></>;\r\n};\r\n\r\nexport default SocketMessages;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { CheckLiveUser, LiveLogIn, RegisterUser } from \"../Network/AuthApi\";\r\nimport { login } from \"../reducers/AuthSlice\";\r\nimport { RegisterLiveInst } from \"../Network/InstApi\";\r\nimport { FetchClients, FetchStaffs } from \"../Network/CredApi\";\r\nimport { FetchModes } from \"../Network/ModeApi\";\r\nimport { FetchExpenseCats } from \"../Network/ExpenseCatApi\";\r\nimport { FetchExpenses } from \"../Network/ExpenseApi\";\r\nimport { FetchAccounts } from \"../Network/AccountApi\";\r\nimport { FetchApplications } from \"../Network/ApplicationApi\";\r\nimport { FetchBranchs } from \"../Network/BranchApi\";\r\nimport { FetchEntrys } from \"../Network/EntryApi\";\r\nimport { FetchGroups } from \"../Network/GroupApi\";\r\nimport { FetchSubs } from \"../Network/SubApi\";\r\nimport { SocketJoinRoom, socket } from \"./SockectConnect\";\r\n\r\nconst FetchData = () => {\r\n  //redux dispatch\r\n  const dispatch = useDispatch();\r\n\r\n  const TheUser = useSelector((state) => state.auth.user);\r\n  const ActiveCred = useSelector((state) => state.cred.activeCred);\r\n  const online = useSelector((state) => state.online.online);\r\n  const ActiveInst = useSelector((state) => state.inst.activeInst);\r\n  const creds = useSelector((state) => state.cred.creds);\r\n  const [Loading, setLoading] = useState(false);\r\n\r\n  const [Connected, setConnected] = useState(false);\r\n\r\n  useEffect(() => {\r\n    UpdateData();\r\n  }, [Connected, TheUser]);\r\n\r\n  const ConnectRooms = () => {\r\n    SocketJoinRoom({ clientId: ActiveInst.clientId });\r\n    creds.map((cred) => {\r\n      if (cred.email == TheUser.logger || cred.contact == TheUser.logger) {\r\n        SocketJoinRoom({\r\n          token: TheUser.token,\r\n          instLinker: cred.instLinker,\r\n          room: cred.instLinker,\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  const UpdateData = async () => {\r\n    if (!Loading) {\r\n      setLoading(true);\r\n      //live user\r\n      let User = !TheUser.token ? await RegisterLiveUser() : TheUser;\r\n\r\n      if (!ActiveInst.id || ActiveInst.id == 0) {\r\n        await RegisterLiveInst(ActiveInst, User, dispatch);\r\n      }\r\n\r\n      FetchData(User);\r\n\r\n      setLoading(false);\r\n    }\r\n    socket.on(\"connect\", () => {\r\n      setConnected(true);\r\n    });\r\n\r\n    socket.on(\"disconnect\", () => {\r\n      setConnected(false);\r\n    });\r\n\r\n    ConnectRooms();\r\n  };\r\n\r\n  const RegisterLiveUser = async () => {\r\n    let liveUser = await CheckLiveUser(TheUser.logger);\r\n    let UserLive;\r\n    if (liveUser === \"register\" || liveUser === 0) {\r\n      UserLive = await RegisterUser(\r\n        TheUser.logger,\r\n        TheUser.password,\r\n        TheUser.linker,\r\n        TheUser.linker\r\n      );\r\n    } else {\r\n      UserLive = await LiveLogIn(TheUser.logger, TheUser.password);\r\n    }\r\n\r\n    if (UserLive.token && UserLive.user) {\r\n      dispatch(\r\n        login({\r\n          name: TheUser.name,\r\n          email: TheUser.logger,\r\n          password: TheUser.password,\r\n          linker: TheUser.linker,\r\n          live: 1,\r\n          token: UserLive.token,\r\n          logger: TheUser.logger,\r\n          id: UserLive.user.id,\r\n        })\r\n      );\r\n\r\n      return {\r\n        name: TheUser.name,\r\n        email: TheUser.logger,\r\n        password: TheUser.password,\r\n        linker: TheUser.linker,\r\n        live: 1,\r\n        token: UserLive.token,\r\n        logger: TheUser.logger,\r\n        id: UserLive.user.id,\r\n      };\r\n    }\r\n    return TheUser;\r\n  };\r\n\r\n  const FetchData = (User) => {\r\n    if (parseInt(ActiveCred.admin) === 1) {\r\n      FetchStaffs(ActiveCred.instLinker, User.token, dispatch, online);\r\n    }\r\n\r\n    if (parseInt(ActiveCred.admin) === 1 || parseInt(ActiveCred.staff) === 1) {\r\n      FetchEntrys(User.token, ActiveCred.instLinker, dispatch, online);\r\n      FetchGroups(User.token, ActiveCred.instLinker, dispatch, online);\r\n      FetchApplications(User.token, ActiveCred.instLinker, dispatch, online);\r\n      FetchBranchs(User.token, ActiveCred.instLinker, dispatch, online);\r\n      FetchClients(ActiveCred.instLinker, User.token, dispatch, online);\r\n      FetchExpenses(User.token, ActiveCred.instLinker, dispatch, online);\r\n      FetchExpenseCats(User.token, ActiveCred.instLinker, dispatch, online);\r\n    }\r\n\r\n    FetchModes(User.token, ActiveCred.instLinker, dispatch, online);\r\n    FetchSubs(User.token, ActiveCred.instLinker, dispatch, online);\r\n    FetchAccounts(User.token, ActiveCred.instLinker, dispatch, online);\r\n  };\r\n\r\n  return <></>;\r\n};\r\n\r\nexport default FetchData;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Outlet } from \"react-router-dom\";\r\nimport AdminNav from \"../Admin/AdminNav\";\r\nimport { useSelector } from \"react-redux\";\r\nimport {\r\n  Bank,\r\n  Calculator,\r\n  Envelope,\r\n  People,\r\n  PersonCircle,\r\n  TicketDetailed,\r\n  Globe,\r\n  Mailbox,\r\n} from \"react-bootstrap-icons\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { VerifySub } from \"../../Utils/VerifySub\";\r\nimport SocketMessages from \"../../Utils/SocketMessages\";\r\nimport FetchData from \"../../Utils/FetchData\";\r\nimport Header from \"../../components/Header\";\r\n\r\nconst Dashboard = () => {\r\n  const navigate = useNavigate();\r\n  const inst = useSelector((state) => state.inst.activeInst);\r\n  const User = useSelector((state) => state.auth.user);\r\n  const subs = useSelector((state) => state.sub.subs);\r\n  const ActiveCred = useSelector((state) => state.cred.activeCred);\r\n  const Sub = VerifySub(subs, ActiveCred.instLinker);\r\n  const [Drawer, setDrawer] = useState(false);\r\n\r\n  const ToggleDrawer = () => setDrawer(!Drawer);\r\n\r\n  useEffect(() => {\r\n    if (!ActiveCred.linker) {\r\n      navigate(\"/\");\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Header ToggleDrawer={ToggleDrawer}></Header>\r\n      <div style={{ marginTop: \"40px\" }}>\r\n        <SocketMessages></SocketMessages>\r\n        <FetchData></FetchData>\r\n\r\n        <div className=\"d-flex\">\r\n          <div\r\n            className={`bg-secondary ${\r\n              Drawer ? \"side-menu-open\" : \"side-menu\"\r\n            }`}\r\n          >\r\n            <div>\r\n              <p\r\n                onClick={() => {\r\n                  setDrawer(false);\r\n                  navigate(`/${inst.name}`);\r\n                }}\r\n              >\r\n                <strong className=\"nav-link text-truncate\">\r\n                  <Bank /> {inst.name}\r\n                </strong>\r\n              </p>\r\n              <hr />\r\n              <p\r\n                onClick={() => {\r\n                  setDrawer(false);\r\n                  navigate(`profile`);\r\n                }}\r\n              >\r\n                <strong className=\"nav-link text-truncate\">\r\n                  <PersonCircle /> {User.name || User.logger}\r\n                </strong>\r\n              </p>\r\n              <hr />\r\n              {parseInt(ActiveCred.admin) === 1 && Sub > 0 ? (\r\n                <AdminNav setDrawer={setDrawer}></AdminNav>\r\n              ) : null}\r\n              {(parseInt(ActiveCred.admin) === 1 ||\r\n                parseInt(ActiveCred.staff) === 1) &&\r\n              Sub > 0 ? (\r\n                <>\r\n                  <p\r\n                    onClick={() => {\r\n                      setDrawer(false);\r\n                      navigate(`clients`);\r\n                    }}\r\n                  >\r\n                    <strong className=\"nav-link text-truncate\">\r\n                      <People /> Clients\r\n                    </strong>\r\n                  </p>\r\n                  <hr />{\" \"}\r\n                  <p\r\n                    onClick={() => {\r\n                      setDrawer(false);\r\n                      navigate(`entries`);\r\n                    }}\r\n                  >\r\n                    <strong className=\"nav-link text-truncate\">\r\n                      <TicketDetailed /> Entries\r\n                    </strong>\r\n                  </p>\r\n                  <hr />{\" \"}\r\n                  <p\r\n                    onClick={() => {\r\n                      setDrawer(false);\r\n                      navigate(`applications`);\r\n                    }}\r\n                  >\r\n                    <strong className=\"nav-link text-truncate\">\r\n                      <Envelope /> Applications\r\n                    </strong>\r\n                  </p>{\" \"}\r\n                  <hr />{\" \"}\r\n                </>\r\n              ) : null}\r\n              {parseInt(ActiveCred.client) === 1 && Sub > 0 ? (\r\n                <>\r\n                  <p\r\n                    onClick={() => {\r\n                      setDrawer(false);\r\n                      navigate(`client/applications`);\r\n                    }}\r\n                  >\r\n                    <strong className=\"nav-link text-truncate\">\r\n                      <Envelope /> Applications\r\n                    </strong>\r\n                  </p>{\" \"}\r\n                  <hr />{\" \"}\r\n                </>\r\n              ) : null}\r\n              <p\r\n                onClick={() => {\r\n                  setDrawer(false);\r\n                  navigate(`calculator`);\r\n                }}\r\n              >\r\n                <strong className=\"nav-link text-truncate\">\r\n                  <Calculator /> Loan Calculator\r\n                </strong>\r\n              </p>{\" \"}\r\n            </div>\r\n            <p>\r\n              {Sub - 30 * 24 * 60 * 60 < 0 &&\r\n              parseInt(ActiveCred.admin) === 1 ? (\r\n                <span\r\n                  onClick={() => {\r\n                    navigate(\r\n                      `/${inst.name}/activate/${inst.name}/${inst.clientId}`\r\n                    );\r\n                    setDrawer(false);\r\n                  }}\r\n                  className=\"text-center\"\r\n                  style={{\r\n                    color: \"hotpink\",\r\n                    cursor: \"pointer\",\r\n                  }}\r\n                >\r\n                  <small>Activate </small>\r\n                </span>\r\n              ) : null}{\" \"}\r\n              <br />\r\n              <span\r\n                onClick={() => {\r\n                  navigate(`/${inst.name}/terms`);\r\n                  setDrawer(false);\r\n                }}\r\n                className=\"text-center text-info\"\r\n                style={{\r\n                  cursor: \"pointer\",\r\n                  fontSize: \"12px\",\r\n                }}\r\n              >\r\n                <small>Terms And Conditions </small>\r\n              </span>{\" \"}\r\n              <br />\r\n              <span\r\n                onClick={() => {\r\n                  navigate(`/${inst.name}/privacy`);\r\n                  setDrawer(false);\r\n                }}\r\n                className=\"text-center text-info\"\r\n                style={{\r\n                  cursor: \"pointer\",\r\n                  fontSize: \"12px\",\r\n                }}\r\n              >\r\n                <small>Privacy Policy </small>\r\n              </span>{\" \"}\r\n              <br />\r\n              <span\r\n                className=\"text-center text-light\"\r\n                style={{\r\n                  cursor: \"pointer\",\r\n                  fontSize: \"12px\",\r\n                }}\r\n              >\r\n                <small>\r\n                  <Globe /> www.techsystems.world\r\n                </small>\r\n              </span>\r\n              <br />\r\n              <span\r\n                className=\"text-center text-light\"\r\n                style={{\r\n                  cursor: \"pointer\",\r\n                  fontSize: \"12px\",\r\n                }}\r\n              >\r\n                <small>\r\n                  <Mailbox /> contact.techsystems@gmail.com\r\n                </small>\r\n              </span>\r\n              <br />\r\n              <span\r\n                className=\"text-center text-light\"\r\n                style={{\r\n                  cursor: \"pointer\",\r\n                  fontSize: \"12px\",\r\n                }}\r\n              >\r\n                <small>&copy; {new Date().getFullYear()} Techsystems</small>\r\n              </span>\r\n            </p>\r\n          </div>\r\n          <div\r\n            className={`${\r\n              Drawer ? \"main-page-drawer-open\" : \"main-page-drawer-closed\"\r\n            }`}\r\n          >\r\n            {Sub < 0 ? (\r\n              <>\r\n                {subs.length > 0 ? (\r\n                  <p className=\"text-danger text-center h6\">\r\n                    Annual Period Lapsed{\" \"}\r\n                    {parseInt(ActiveCred.admin) === 1 ? (\r\n                      <span\r\n                        className=\"text-primary btn-link\"\r\n                        style={{ cursor: \"pointer\" }}\r\n                        onClick={() =>\r\n                          navigate(\r\n                            `/${inst.name}/activate/${inst.name}/${inst.clientId}`\r\n                          )\r\n                        }\r\n                      >\r\n                        <em>Click To Activate</em>\r\n                      </span>\r\n                    ) : (\r\n                      \"Contact Your Institution Admin to Activate\"\r\n                    )}\r\n                  </p>\r\n                ) : (\r\n                  <p className=\"text-danger text-center h6\">\r\n                    Trial Period Lapsed{\" \"}\r\n                    {parseInt(ActiveCred.admin) === 1 ? (\r\n                      <span\r\n                        className=\"text-primary btn-link\"\r\n                        style={{ cursor: \"pointer\" }}\r\n                        onClick={() =>\r\n                          navigate(\r\n                            `/${inst.name}/activate/${inst.name}/${inst.clientId}`\r\n                          )\r\n                        }\r\n                      >\r\n                        <em>Click To Activate</em>\r\n                      </span>\r\n                    ) : (\r\n                      \"Contact Your Institution Admin to Activate\"\r\n                    )}\r\n                  </p>\r\n                )}\r\n              </>\r\n            ) : Sub < 5 * 24 * 60 * 60 ? (\r\n              <>\r\n                {subs.length > 0 ? (\r\n                  <p className=\"text-danger text-center h6\">\r\n                    Annual Period Lapsing in {parseInt(Sub / (24 * 60 * 60))}{\" \"}\r\n                    Days\r\n                    {parseInt(ActiveCred.admin) === 1 ? (\r\n                      <span\r\n                        className=\"text-primary btn-link\"\r\n                        style={{ cursor: \"pointer\" }}\r\n                        onClick={() =>\r\n                          navigate(\r\n                            `/${inst.name}/activate/${inst.name}/${inst.clientId}`\r\n                          )\r\n                        }\r\n                      >\r\n                        <em>Click To Activate</em>\r\n                      </span>\r\n                    ) : (\r\n                      \"Contact Your Institution Admin to Activate\"\r\n                    )}\r\n                  </p>\r\n                ) : (\r\n                  <p className=\"text-danger text-center h6\">\r\n                    Trial Period Lapsing in {parseInt(Sub / (24 * 60 * 60))}{\" \"}\r\n                    Days\r\n                    {parseInt(ActiveCred.admin) === 1 ? (\r\n                      <span\r\n                        className=\"text-primary btn-link\"\r\n                        style={{ cursor: \"pointer\" }}\r\n                        onClick={() =>\r\n                          navigate(\r\n                            `/${inst.name}/activate/${inst.name}/${inst.clientId}`\r\n                          )\r\n                        }\r\n                      >\r\n                        <em>Click To Activate</em>\r\n                      </span>\r\n                    ) : (\r\n                      \"Contact Your Institution Admin to Activate\"\r\n                    )}\r\n                  </p>\r\n                )}\r\n              </>\r\n            ) : null}\r\n            <div className=\"bg-light\">\r\n              <Outlet></Outlet>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n","export const VerifySub = (subs, instLinker) => {\r\n  let subTimes = subs\r\n    .filter((sub) => sub.softwareId == parseInt(instLinker / 1000))\r\n    .reduce((accumulator, current) => {\r\n      let Exists = accumulator.some((obj) => obj.code == current.code);\r\n      if (!Exists) {\r\n        accumulator.push(current);\r\n      }\r\n      return accumulator;\r\n    }, [])\r\n    .map((sub, index) => {\r\n      let softwareId = parseInt(instLinker / 1000);\r\n\r\n      let subTime = 0;\r\n\r\n      if (softwareId == sub.softwareId) {\r\n        let amt = sub.code / (index + 2) - softwareId;\r\n\r\n        subTime =\r\n          (amt === 99 && index === 0) || (amt === 29 && index > 0)\r\n            ? 366 * 24 * 60 * 60\r\n            : 0;\r\n      }\r\n\r\n      return subTime;\r\n    });\r\n\r\n  return (\r\n    subTimes.reduce((a, b) => +a + +b, 0) +\r\n    parseInt(instLinker / 1000) +\r\n    90 * 24 * 60 * 60 -\r\n    parseInt(Date.now() / 1000)\r\n  );\r\n};\r\n"],"names":["FetchSubs","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","token","instLinker","dispatch","online","payload","_args","arguments","wrap","_context","prev","next","length","undefined","FetchLiveSubs","parseInt","updateSub","stop","_x","_x2","_x3","_x4","apply","fetch","concat","ApiUrl","method","headers","authorization","body","JSON","stringify","then","res","json","status","fetchSubs","subs","catch","setDrawer","navigate","useNavigate","useSelector","state","inst","activeInst","_jsxs","_Fragment","children","Dropdown","style","width","variant","className","_jsx","PersonGear","onClick","CashCoin","socket","io","SocketJoinRoom","data","emit","useDispatch","User","auth","user","ActiveCred","cred","activeCred","useEffect","on","message","messageType","FetchStaffs","dataValues","FetchModes","FetchExpenseCats","FetchExpenses","FetchAccounts","FetchApplications","FetchBranchs","FetchEntrys","FetchGroups","FetchClients","TheUser","ActiveInst","creds","_useState","useState","_useState2","_slicedToArray","Loading","setLoading","_useState3","_useState4","Connected","setConnected","UpdateData","RegisterLiveUser","t0","sent","id","RegisterLiveInst","FetchData","clientId","map","email","logger","contact","room","_ref2","_callee2","liveUser","UserLive","_context2","CheckLiveUser","RegisterUser","password","linker","LiveLogIn","login","name","live","abrupt","admin","staff","sub","Sub","VerifySub","Drawer","Header","ToggleDrawer","marginTop","SocketMessages","Bank","PersonCircle","AdminNav","People","TicketDetailed","Envelope","client","Calculator","color","cursor","fontSize","Globe","Mailbox","Date","getFullYear","Outlet","filter","softwareId","reduce","accumulator","current","some","obj","code","push","index","subTime","amt","a","b","now"],"sourceRoot":""}